name: checks

on:
  workflow_run:
    workflows:
      - '*'
    types:
      - completed

jobs:
  # to put variable in concurrency group
  setup_matrix:
    runs-on: ubuntu-latest
    outputs:
      head_shas: ${{ steps.set_output.outputs.head_shas }}
      pr_numbers: ${{ steps.set_output.outputs.pr_numbers }}
    steps:
      - uses: juliangruber/find-pull-request-action@v1
        id: find_pr
        with:
          branch: ${{ github.head_ref }}
      - name: Set output
        id: set_output
        run: |
          head_shas='["${{ steps.find_pr.outputs.head-sha }}"]'
          pr_numbers='["${{ steps.find_pr.outputs.number }}"]'
          echo "head_shas=$head_shas"
          echo "pr_numbers=$pr_numbers"


  workflow_run:
    needs:
      - setup_matrix
    strategy:
      matrix:
        head_sha: ${{ fromJSON(needs.setup_matrix.outputs.head_shas) }}
        pr_number: ${{ fromJSON(needs.setup_matrix.outputs.pr_numbers) }}
    concurrency:
      group: checks-${{ matrix.pr_number }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    permissions:
      checks: write
    steps:
      - name: Create checks
        run: |
          gh api /repos/${{ github.repository }}/commits/${{ matrix.head_sha }}/check-runs > ${{ runner.temp }}/check-run
          non_completed_count=$(cat ${{ runner.temp }}/check-run | jq -r '[.check_runs[] | select(.name != "pr_check" and .status != "completed")] | length')
          failure_count=$(cat ${{ runner.temp }}/check-run | jq -r '[.check_runs[] | select(.name != "pr_check" and .status == "completed" and .conclusion == "failure")] | length')

          echo "non_completed_count=$non_completed_count"
          echo "failure_count=$failure_count"

          conclusion="success"
          if [ $non_completed_count -gt 0 ]; then
            conclusion="queued"
          elif [ $failure_count -gt 0 ]; then
            conclusion="failure"
          fi

          gh api /repos/${{ github.repository }}/check-runs -f name=pr_check -f head_sha=${{ matrix.head_sha }} -f status=completed -f conclusion=$conclusion

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

